if (ttd_platform != PLATFORM_OPENTTD || openttd_version < version_openttd(1, 2, 0, 22518)) {
	error(FATAL, REQUIRES_OPENTTD, string(STR_MIN_OPENTTD_VERSION));
	exit;
}

grf {
    grfid: "AD\01\01";  // TTDPatch ID and published version
    name: string(STR_GRF_NAME);
    desc: string(STR_GRF_DESCRIPTION);
    version: 6; // OpenTTD published version
    min_compatible_version: 0;

    // versions:
    // 1 = 0.1.0alpha9
    // 2 = 0.2.0 (post alpha 8)
    // 5 = 0.5.0 (post alpha 30)
    param 0 {
        Aircraft_Ranges {
            type: int;
            name: string(STR_PARAM_NAME_RANGES);
            desc: string(STR_PARAM_DESC_RANGES);
            min_value: 0;
            max_value: 1;
            def_value: 1;
            names: {
                0: string(STR_PARAM_VALUE_RANGES_OFF);
                1: string(STR_PARAM_VALUE_RANGES_NORMAL);
            } ;
        }
    }
    param 1 {
        airport_disable_date_restrictions {
            type: bool;
            name: string(STR_PARAM_NAME_AIRPORT_DATE_RESTRICTION);
            desc: string(STR_PARAM_DESC_AIRPORT_DATE_RESTRICTION);
            def_value: 0;
            bit: 1;
        }
    }
    param 2 {
        param_airport_enable {
            type: int;
            name: string(STR_PARAM_NAME_AIRPORT_ENABLE);
            desc: string(STR_PARAM_DESC_AIRPORT_ENABLE);
            min_value: 0;
            max_value: 4;
            def_value: 1;
            names: {
                0: string(STR_PARAM_VALUE_AIRPORT_NONE);
                1: string(STR_PARAM_VALUE_AIRPORT_ALL);
                2: string(STR_PARAM_VALUE_AIRPORT_CLASSIC_ONLY);
                3: string(STR_PARAM_VALUE_AIRPORT_CARRIER_ONLY);
                4: string(STR_PARAM_VALUE_AIRPORT_HELIPORTS_ONLY);
            } ;
        }
    }
    param 3 {
        param_aircraft_enable_cs {
            type: int;
            name: string(STR_PARAM_NAME_AIRCRAFT_ENABLE_CS);
            desc: string(STR_PARAM_DESC_AIRCRAFT_ENABLE_CS);
            min_value: 0;
            max_value: 5;
            def_value: 1;
            names: {
                0: string(STR_PARAM_VALUE_AIRCRAFT_NONE);
                1: string(STR_PARAM_VALUE_AIRCRAFT_ALL);
                2: string(STR_PARAM_VALUE_AIRCRAFT_FIGHTERS);
                3: string(STR_PARAM_VALUE_AIRCRAFT_AIRLIFTERS);
                4: string(STR_PARAM_VALUE_AIRCRAFT_HELIS);
                5: string(STR_PARAM_VALUE_AIRCRAFT_AIRLIFTERS_AND_HELIS);
            } ;
        }
    }
    param 4 {
        param_aircraft_enable_eu {
            type: int;
            name: string(STR_PARAM_NAME_AIRCRAFT_ENABLE_EU);
            desc: string(STR_PARAM_DESC_AIRCRAFT_ENABLE_EU);
            min_value: 0;
            max_value: 5;
            def_value: 1;
            names: {
                0: string(STR_PARAM_VALUE_AIRCRAFT_NONE);
                1: string(STR_PARAM_VALUE_AIRCRAFT_ALL);
                2: string(STR_PARAM_VALUE_AIRCRAFT_FIGHTERS);
                3: string(STR_PARAM_VALUE_AIRCRAFT_AIRLIFTERS);
                4: string(STR_PARAM_VALUE_AIRCRAFT_HELIS);
                5: string(STR_PARAM_VALUE_AIRCRAFT_AIRLIFTERS_AND_HELIS);
            } ;
        }
    }
    param 5 {
        param_aircraft_enable_rus {
            type: int;
            name: string(STR_PARAM_NAME_AIRCRAFT_ENABLE_RUS);
            desc: string(STR_PARAM_DESC_AIRCRAFT_ENABLE_RUS);
            min_value: 0;
            max_value: 5;
            def_value: 1;
            names: {
                0: string(STR_PARAM_VALUE_AIRCRAFT_NONE);
                1: string(STR_PARAM_VALUE_AIRCRAFT_ALL);
                2: string(STR_PARAM_VALUE_AIRCRAFT_FIGHTERS);
                3: string(STR_PARAM_VALUE_AIRCRAFT_AIRLIFTERS);
                4: string(STR_PARAM_VALUE_AIRCRAFT_HELIS);
                5: string(STR_PARAM_VALUE_AIRCRAFT_AIRLIFTERS_AND_HELIS);
            } ;
        }
    }
    param 6 {
        param_aircraft_enable_us {
            type: int;
            name: string(STR_PARAM_NAME_AIRCRAFT_ENABLE_US);
            desc: string(STR_PARAM_DESC_AIRCRAFT_ENABLE_US);
            min_value: 0;
            max_value: 5;
            def_value: 1;
            names: {
                0: string(STR_PARAM_VALUE_AIRCRAFT_NONE);
                1: string(STR_PARAM_VALUE_AIRCRAFT_ALL);
                2: string(STR_PARAM_VALUE_AIRCRAFT_FIGHTERS);
                3: string(STR_PARAM_VALUE_AIRCRAFT_AIRLIFTERS);
                4: string(STR_PARAM_VALUE_AIRCRAFT_HELIS);
                5: string(STR_PARAM_VALUE_AIRCRAFT_AIRLIFTERS_AND_HELIS);
            } ;
        }
    }
    param 7 {
        param_aircraft_enable_other {
            type: int;
            name: string(STR_PARAM_NAME_AIRCRAFT_ENABLE_OTHER);
            desc: string(STR_PARAM_DESC_AIRCRAFT_ENABLE_OTHER);
            min_value: 0;
            max_value: 5;
            def_value: 1;
            names: {
                0: string(STR_PARAM_VALUE_AIRCRAFT_NONE);
                1: string(STR_PARAM_VALUE_AIRCRAFT_ALL);
                2: string(STR_PARAM_VALUE_AIRCRAFT_FIGHTERS);
                3: string(STR_PARAM_VALUE_AIRCRAFT_AIRLIFTERS);
                4: string(STR_PARAM_VALUE_AIRCRAFT_HELIS);
                5: string(STR_PARAM_VALUE_AIRCRAFT_AIRLIFTERS_AND_HELIS);
            } ;
        }
    }
    param 8 {
        param_standard_planes_disable {
            type: bool;
            name: string(STR_PARAM_NAME_STD_PLANES);
            desc: string(STR_PARAM_DESC_STD_PLANES);
            def_value: 0;
            bit: 2;
        }
    }
}